name: TechMart Security Lab CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', 3.11, 3.12, 3.13]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8 black mypy
        
    - name: Code formatting check
      run: |
        black --check --diff .
        
    - name: Linting
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Type checking
      run: |
        mypy app.py --ignore-missing-imports
        
    - name: Run tests
      run: |
        pytest tests/ -v --cov=. --cov-report=xml
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  security-scan:
    name: Security Analysis
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
        
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
        
    - name: Run Bandit security scan
      run: |
        bandit -r . -f json -o bandit-report.json || true
        
    - name: Check dependencies for vulnerabilities
      run: |
        safety check --json --output safety-report.json || true
        
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  vulnerability-verification:
    name: Verify Educational Vulnerabilities
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Start application
      run: |
        python app.py &
        sleep 10
        
    - name: Verify vulnerabilities are accessible
      run: |
        # Test that the application starts correctly
        curl -f http://localhost:5001/ || exit 1
        
        # Test login page accessibility
        curl -f http://localhost:5001/login || exit 1
        
        # Test that vulnerabilities are present (basic checks)
        python -c "
        import requests
        import sys
        
        # Test SQL injection endpoint exists
        try:
            resp = requests.post('http://localhost:5001/login', 
                               data={'username': 'test', 'password': 'test'})
            print('✓ Login endpoint accessible')
        except:
            print('✗ Login endpoint failed')
            sys.exit(1)
            
        # Test XSS endpoint exists  
        try:
            resp = requests.get('http://localhost:5001/product/1')
            print('✓ Product page accessible')
        except:
            print('✗ Product page failed')
            sys.exit(1)
            
        print('✓ All vulnerability endpoints accessible')
        "

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: techmart-lab:test
        
    - name: Test Docker container
      run: |
        docker run -d -p 5001:5001 --name techmart-test techmart-lab:test
        sleep 15
        curl -f http://localhost:5001/ || exit 1
        docker stop techmart-test

  documentation:
    name: Documentation Check
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Check required documentation files
      run: |
        files=("README.md" "SECURITY.md" "CONTRIBUTING.md" "LICENSE" "CHANGELOG.md")
        for file in "${files[@]}"; do
          if [ ! -f "$file" ]; then
            echo "✗ Missing required file: $file"
            exit 1
          else
            echo "✓ Found: $file"
          fi
        done
        
    - name: Validate markdown files
      uses: gaurav-nelson/github-action-markdown-link-check@v1
      with:
        use-quiet-mode: 'yes'
        use-verbose-mode: 'yes'

  educational-compliance:
    name: Educational Compliance Check
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Check educational disclaimers
      run: |
        # Check that educational warnings are present
        if ! grep -q "educational purposes" README.md; then
          echo "✗ Missing educational purpose disclaimer in README"
          exit 1
        fi
        
        if ! grep -q "intentional.*vulnerabilit" README.md; then
          echo "✗ Missing vulnerability warning in README"
          exit 1
        fi
        
        echo "✓ Educational disclaimers present"
        
    - name: Verify no production secrets
      run: |
        # Check for potential production credentials/secrets
        if grep -r "password.*production\|secret.*prod\|api.*key.*[A-Za-z0-9]{20}" . --exclude-dir=.git --exclude="*.md"; then
          echo "✗ Potential production secrets found"
          exit 1
        fi
        echo "✓ No production secrets detected"

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [test, security-scan, vulnerability-verification, docker-build, documentation, educational-compliance]
    if: github.event_name == 'release'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
        
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
        
    - name: Build package
      run: |
        python -m build
        
    - name: Upload release assets
      uses: actions/upload-artifact@v3
      with:
        name: release-assets
        path: dist/*
